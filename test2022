//int main()
//{
//	//字符指针
//	char ch = 'w';
//	char* ch = &ch;
//	//指针数组-存放指针的数组
//	int* arr[10] = {0};
//	char* ch[5];
//	//数组指针
//	//int *p1;//整型指针-指向整型的指针
//	//char * p4;//字符指针-指向字符的指针
//	int arr2[5] = {0};
//	int (*pa)[5]=&arr2[5];
//	int(*parr[10])[5];
//	return 0;
//}
//void test(int arr[3][5])
//{}
//void test1(int arr[][5])
//{}
////void test(int arr[3][])//error
////{}
//void test(int arr[][])//error
//{}
//二维数组不能省略列，可以省略行
//void test3(int *arr)//error
//{}
//void test(int **arr)//error
//{}
//#include<stdio.h>
//void test5(int (*arr)[5])
//{}
//int main()
//{
//	int arr[3][5];
//	//test(arr);//二维数组传参
//	//test1(arr);
//	//test2(arr);
//	/*test3(arr);*/
//	/*test4(arr);*/
//	test5(arr);
//	return 0;
//}
//void test(int *p)
//{}
//void test2(char *p)
//{}
//int main()
//{
//	int a = 10;
//	int *p1 = &a;
//	test1(&a);
//	test2(p1);
//	return 0;
//}
//char* my_strcpy(char* dest, const char* src);
////1.写一个函数指针pf，能够指向my_strcpy
//char*(*pf)(char*, const char*);
//2.写一个函数指针数组pfArr，能够存放4个my_strcpy函数的地址
//char* (*pfArr[4])(char*, const char*);
#include<stdio.h>
#include<stdlib.h>
int Add(int x,int y)
{
	return x + y;
}
int Sub(int x, int y)
{
	return x - y;
}
int Mul(int x, int y)
{
	return x * y;
}
int Div(int x, int y)
{
	return x / y;
}
int main()
{
	/*int* arr[5];*/
	//需要一个数组，这个数组可以存放四个函数的地址-函数指针地址
	int(*pa)(int, int) = Add;//Sub/Mul/Div
	int(*parr[4])(int, int) = {Add,Sub,Mul,Div};
	int i = 0;
	for (i = 0; i < 4; i++)
	{
		printf("%d\n",parr[i](2, 3));
	}
	system("pause");
	return 0;
}
